#%RAML 1.0
baseUri: http://{host}:{port}/repository/api/v1
baseUriParameters:
  host:
    example: exchange-vcs-1186014507.us-east-1.elb.amazonaws.com
  port:
    type: number
    example: 8080
title: Design Center Projects Service
version: v1
mediaType: application/json

schemas:

  branch:                 !include schemas/branch.json
  branches:               !include schemas/branches.json
  branchCreate:           !include schemas/branchCreate.json
  branchFileCreate:       !include schemas/branchFileCreate.json
  commit:                 !include schemas/commit.json
  commitCreate:           !include schemas/commitCreate.json
  commits:                !include schemas/commits.json
  diffResult:             !include schemas/diffResult.json
  fileSchema:             !include schemas/file.json
  files:                  !include schemas/files.json
  project:                !include schemas/project.json
  projectCreate:          !include schemas/projectCreate.json
  projectUpdate:          !include schemas/projectUpdate.json
  tag:                    !include schemas/tag.json
  tagCreate:              !include schemas/tagCreate.json
  tags:                   !include schemas/tags.json
  revertCommit:           !include schemas/revertCommit.json
  workingDirectory:       !include schemas/workingDirectory.json
  workingDirectoryCreate: !include schemas/workingDirectoryCreate.json
  workingDirectoryPatch:  !include schemas/workingDirectoryPatch.json

/ping:
  get:
    responses:
      200:
        body:
          application/json:
/health:
  get:
    responses:
      200:
        body:
          application/json:
/projects:
  get:
    queryParameters:
      organizationId:
        description: Filter by organizationId.
      type:
        description: Filter by type
      product:
        description: Filter by product
      projectName:
        description: Filter by product
      page:
        description: page number
      size:
        description: the size the the page result
    description:
      Gets all the projects that the user has access
    responses:
      200:
  /count:
      get:
        queryParameters:
          organizationId:
            description: Filter by organizationId.
          type:
            description: Filter by type
          product:
            description: Filter by product
          projectName:
            description: Filter by product
        description:
          Gets the total number of projects that the user has access
        responses:
          200:
/organizations/{organizationId}/projects:
  uriParameters:
    organizationId:
      description: Id of the organization
      type: string
      maxLength: 2048
      example: "1"
  get:
    queryParameters:
      organizationId:
        description: Filter by organizationId.
      type:
        description: Filter by type
      product:
        description: Filter by product
      projectName:
        description: Filter by product
      page:
        description: page number
      size:
        description: the size the the page result
    description:
      Gets all the projects that the user has access in the given organization
    responses:
      200:
  post:
    description: Creates a new project
    body:
      schema: projectCreate
      example: !include examples/projectCreate.json
    responses:
      201:
        body:
            schema: project
            example: !include examples/project.json
      409:
        description: "Project {type}-{name} already exists"
  /count:
    get:
        queryParameters:
          organizationId:
            description: Filter by organizationId.
          type:
            description: Filter by type
          product:
            description: Filter by product
          projectName:
            description: Filter by product
        description:
          Gets the total number of projects that the user has access in the given organization
        responses:
          200:
  /{projectId}:
    uriParameters:
      projectId:
        description: Id of the project
        type: string
        maxLength: 36
        minLength: 36
        pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
        example: "4f470cd8-593d-4eeb-86fb-0cfa96744fde"
    get:
      description: Gets information about the given project
      responses:
        200:
          body:
              schema: project
              example: !include examples/project.json
        404:
          description: "Project does not exist"
    delete:
      description: Deletes the given project
      responses:
        204:
    patch:
      description: Updates the project data
      body:
        schema: projectUpdate
        example: !include examples/projectUpdate.json
      responses:
        200:
          body:
            schema: project
            example: !include examples/project.json
        404:
          description: "Project does not exist"
        409:
          description: "Project {type}-{name} already exists"
    /refs/{from}/diff:
      uriParameters:
        from:
          description: The reference from where it's going to check the differences.
      get:
        description: Gets the difference between two references
        responses:
          200:
            body:
              schema: diffResult
          404:
            description: "Reference does not exist"
    /refs/{referenceId}/archive:
      uriParameters:
        referenceId:
          description: The reference id to get the archive.
      get:
        description: Gets project archives
        responses:
          200:
            body:
              application/octet-stream:
    /refs/{commitId}/show:
      uriParameters:
        commitId:
          description: Commit Id
      get:
        description: Gets commit data
        responses:
          200:
            body:
              schema: diffResult
              example: !include examples/diffResult.json
    /rename:
      put:
        description: Rename a project
        body:
          #schema: projectName
        responses:
          202:
          404:
    /commits/{toCommitId}/files:
      get:
        queryParameters:
          sortMethod:
            description: This parameter is optional. Method used for sorting the entries, it can either be FILE_PATH or COMMIT_TIMESTAMP. Default value is FILE_PATH
            enum: ["FILE_PATH", "COMMIT_TIMESTAMP"]
            example: FILE_PATH
        description: Gets a list of the structure of the file system in the given commit.
        responses:
          200:
            body:
              schema: files
              example: !include examples/files.json
      /{+fileName}:
        uriParameters:
          +fileName:
            description: Name of the file. This value must be encoded using url encode.
        get:
          description: Returns the given file
          responses:
            200:
              body:
                "*/*":
    /{ownerid}/{branchName}/zip:
      post:
        description: Upload a zip to the given branch
        responses:
          200:
          400:
            description: This is not a valid zip
          404:
            description: Working Directory was not found
    /branches:
      get:
        description: Gets all the branches
        responses:
          200:
            body:
              schema: branches
              example: !include examples/branches.json
      post:
        description: Creates a new branch
        body:
          schema: branchCreate
          example: !include examples/branchCreate.json
        responses:
          201:
            body:
              schema: branch
              example: !include examples/branch.json
      /{branchName}:
        uriParameters:
          branchName:
            description: Name of the branch. This value must be encoded using url encode.
            type: string
            pattern: "^[a-zA-Z0-9_\\./]*$"
            maxLength: 64
            example: develop
        delete:
          description: Deletes the branch
          responses:
            204:
        get:
          description: Retrieves the branch
          responses:
            200:
              body:
                schema: branch
                example: !include examples/branch.json
        patch:
          description: |
            Merge the branch with another branch.
            NOTE: This endpoint is intended to be used by Asset Portal Service for now. In that service a branch won't generate conflict while merging. Don't use it as long as a mechanism to resolve this kind of conflicts is implemented.
          headers:
            x-merge-with:
              description: The branch to merge with, this header is mandatory
              type: string
              pattern: "^[a-zA-Z0-9_\\./]*$"
              maxLength: 64
              required: true
              example: 1.0.0
          responses:
            204:
            409:
              description: There were conflicts during merge.
        /revert:
          patch:
            description: Revert to specific commit Id
            body:
              schema: revertCommit
              example: !include examples/revertCommit.json
            responses:
              200:
                body:
                  schema: commit
                  example: !include examples/commit.json
        /files:
          get:
            description: Gets a list of the structure of the file system in the given branch
            responses:
              200:
                body:
                  schema: files
                  example: !include examples/files.json
          post:
            description: Creates/Moves a file in the given branch. Only files can be created, not folders. This operation generates a commit.
            headers:
              x-move-source:
                description: |
                  This header is used when you want to rename or move an existing file or folder. `x-move-source` specifies the path of the file or folder that wants to be moved, the source. The request body property `path` will be the destination.
            body:
              schema: branchFileCreate
              example: !include examples/branchFileCreate.json
            responses:
              201:
                body:
                  schema: file
                  example: !include examples/file.json
              400:
                description: If the `x-move-source` header equals the file path in the body
              404:
                description: If the `x-move-source` header is given and the file does not exist
              409:
                description: If the file (destination) already exists or any sub path is not a folder
          /{+fileName}:
            uriParameters:
              +fileName:
                description: Name of the file. This value must be encoded using url encode.
            get:
              queryParameters:
                log:
                  description: If specified, instead of returning the file content, it returns all the references where the file have been modified.
              description: Returns the given file
              responses:
                200:
                  body:
                    "*/*":
            put:
              description: Creates or updates the given file
              headers:
                x-commit-message:
                  description: Message of the commit that will be generated when upserting the file.
                x-base-commit-id:
                  description: |
                    If this header is given, the system will check in the file log if this commit id equals the last commit where the file has been modified.
                    If someone else made a modification before, and error will be returned.
              body:
                "*/*":
              responses:
                204:
                400:
                  description: if the given `x-base-commit-id` is invalid or if the given file is a folder.
                404:
                  description: if the file could not be found and the `x-base-commit-id` is given. Otherwise, the system will try to create the file.
                409:
                  description: if the last commit is different from `x-base-commit-id`.
            delete:
              description: Deletes te given file or folder
              headers:
                x-commit-message:
                  description: Message of the commit that will be generated when deleting the file.
              responses:
                204:
                400:
                  description: when attempt to delete root folder
    /tags:
      get:
        description: Gets all the tags
        responses:
          200:
            body:
              schema: tags
              example: !include examples/tags.json
      post:
        description: Creates a new tag
        body:
          schema: tagCreate
          example: !include examples/tagCreate.json
        responses:
          201:
            body:
              schema: tag
              example: !include examples/tag.json
      /{tagName}:
        uriParameters:
          tagName:
            description: Name of the tag. This value must be encoded using url encode.
            type: string
            maxLength: 128
            example: 1.1.0-SNAPSHOT
        delete:
          description: Deletes the tag
          responses:
            204:
        get:
          description: Gets the tag
          responses:
            200:
              body:
                schema: tag
                example: !include examples/tag.json
        /files:
          get:
            description: Gets a list of the structure of the file system in the given tag
            responses:
              200:
                body:
                  schema: files
                  example: !include examples/files.json
          /{+fileName}:
            uriParameters:
              +fileName:
                description:
                  Name of the file. This value must be encoded using url encode.
            get:
              description: Returns the given file
              responses:
                200:
                  body:
                    "*/*":
    /workingDirectories:
      get:
        description: Gets all the workingDirectories of the user for the given project.
        responses:
          200:
      post:
        description: |
          Creates a new working directory of the given project. The branch is specified in the request body (default value is master).
        body:
          schema: workingDirectoryCreate
          example: |
            {
              "branch": "develop"
            }
        responses:
          200:
            body:
              schema: workingDirectory
              example: !include examples/workingDirectory.json
          400:
            description: The given branch is invalid
          409:
            description: "WorkingDirectory for the given branch already exists"
      /{ownerId}/{branchName}:
        uriParameters:
          ownerId:
            description: Id of the authenticated user
            type: string
            maxLength: 128
            example: cf600fa8-23ec-408b-9010-71cc495b2205
          branchName:
            description: Branch of the project. This value must be encoded using url encode.
            type: string
            maxLength: 128
            example: master
        get:
          description: Gets basic information of the working directory.
          responses:
            200:
              body:
                schema: workingDirectory
                example: !include examples/workingDirectory.json
            404:
              description: The given working directory does not exist
        patch:
          description: Updates the working directory. Pull the changes from remote repository.
          responses:
            200:
              body:
                schema: workingDirectoryPatch
                example: !include examples/workingDirectoryPatch.json
            404:
              description: "Working Directory does not exist"
            409:
              description: |
                This error happens when:
                - There are unresolved conflict in the working directory.
                - There are uncommited changes in the working directory.
                - The repository is currently empty.
        delete:
          description: Delete a working directory
          responses:
            204:
        /archive:
          get:
            description: Gets the working directory archive (zip).
            responses:
              200:
                body:
                  application/octet-stream:
              404:
                description: The given working directory does not exist
        /files:
          get:
            description: Gets a list of the structure of the file system
            responses:
              200:
                body:
                  schema: files
                  example: !include examples/files.json
          post:
            description: |
              Creates an empty file or folder. Remember that:
                - A file cannot be moved/created to/in a path that already contains another file (or folder) with the same name.
                - Folders are created recursively. ex /folder1/folder2/folder3 will create all necesary parent folder.
                - If not type is specified, 'FILE' type is used.
            headers:
              x-move-source:
                description: |
                  This header is used when you want to rename or move an existing file or folder. `x-move-source` specifies the path of the file or folder that wants to be moved, the source. The request body property `path` will be the destination.
            body:
              schema: file
              example: !include examples/file.json
            responses:
              201:
                body:
                  schema: file
                  example: !include examples/file.json
              400:
                description: If the `x-move-source` header equals the file path in the body
              404:
                description: If the `x-move-source` header is given and the file does not exist
              409:
                description: If the file (destination) already exists or any sub path is not a folder
          /{+fileName}:
            uriParameters:
              +fileName:
                description: Name of the file. This value must be encoded using url encode.
            get:
              queryParameters:
                reference:
                  description: If specified, instead of returning the latest revision, it returns the file in the given reference.
                log:
                  description: Returns all the references where the file have been modified.
              description: Returns the given file
              responses:
                200:
                  headers:
                    x-type:
                      enum: ["FILE"]
                      example: FILE
                  body:
                    "*/*":
                    application/json:
                      schema: commits
                      example: !include examples/commits.json
                204:
                  headers:
                    x-type:
                      enum: ["FOLDER"]
                      example: FOLDER
            put:
              description: Creates or updates the given file
              body:
                "*/*":
              responses:
                204:
                400:
                  description: if the given file is a folder.
            delete:
              description: Deletes the given file or folder
              responses:
                204:
                400:
                  description: when attempt to delete root folder
        /commits:
          get:
            description: Returns the commits for the working directory
            responses:
              200:
                body:
                  schema: commits
                  example: !include examples/commits.json
          post:
            description: Creates a new commit
            headers:
              x-publish-changes:
                description: |
                  This header is optional. if it set to false only the commit will be generated. Default value: true.
                enum: ["true", "false"]
                example: "false"
            body:
              schema: commitCreate
              example: |
                {
                  "message": "Initial commit"
                }
            responses:
              201:
                body:
                  schema: commit
                  example: !include examples/commit.json
        /conflicts:
          get:
            description: Returns the conflicts for the working directory
            responses:
              200:
                body:
                  # schema: conflicts
                  # example: !include examples/conflicts.json
          delete:
            description: Marks all the conflicts as resolved
            headers:
              x-resolve-conflicts-strategy:
                description: |
                  This header is optional, if used it will resolve all the conflicts using `ours` or `theirs` changes.
                enum: ["OURS", "THEIRS"]
                example: OURS
            responses:
              204:
          /{+fileName}:
            uriParameters:
              +fileName:
                description: Name of the file that has a conflict. This value must be encoded using url encode.
            delete:
              description: Marks the conflict on the fileName as resolved
              headers:
                x-resolve-conflicts-strategy:
                  description: |
                    This header is optional, if used it will resolve the conflicts using `ours` or `theirs` changes.
                  enum: ["OURS", "THEIRS"]
                  example: OURS
              responses:
                204:
        /status:
          get:
            description: Get the current status of the working directory
            responses:
              200:
                body:
                  #schema: workingDirectoryStatus
                  #example: !include examples/workingDirectoryStatus.json